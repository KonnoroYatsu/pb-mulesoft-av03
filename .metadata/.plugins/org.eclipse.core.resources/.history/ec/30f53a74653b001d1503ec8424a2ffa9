package com.avaliacao03.avaliacao03.controller;

import java.net.URI;
import java.util.Optional;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.avaliacao03.avaliacao03.config.RegiaoInvalidaException;
import com.avaliacao03.avaliacao03.controller.dto.EstadosDto;
import com.avaliacao03.avaliacao03.controller.form.EstadosForm;
import com.avaliacao03.avaliacao03.modelo.Estado;
import com.avaliacao03.avaliacao03.modelo.Regiao;
import com.avaliacao03.avaliacao03.repository.EstadoRepository;

@RestController
@RequestMapping(value = "/api/v1/estados")
public class EstadosController {
	
	@Autowired
	private EstadoRepository estadoRepository;
	
	@GetMapping
	public Page<EstadosDto> listar(
			@RequestParam(required = false) String filtroRegiao,
			@RequestParam(required = false) String ordenacao,
			@PageableDefault(size = 10) Pageable paginacao){
		
		if(ordenacao != null) {
			paginacao = PageRequest.of(0, 10, Sort.by(ordenacao));
		}
		if(filtroRegiao == null) {
			Page<Estado> estados = estadoRepository.findAll(paginacao);
			return EstadosDto.converter(estados);
		}else {
			Regiao regiao;
			try {
				regiao = Regiao.valueOf(filtroRegiao);
			}catch (Exception e) {
				throw new RegiaoInvalidaException(filtroRegiao);
			}
			Page<Estado> estados = estadoRepository.findByRegiao(regiao, paginacao);
			return EstadosDto.converter(estados);
		}		
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<EstadosDto> pesquisarPorId(@PathVariable Long id) {
		Optional<Estado> estado = estadoRepository.findById(id);
		if(estado.isPresent()){
			return ResponseEntity.ok(new EstadosDto(estado.get()));
		}
		return ResponseEntity.notFound().build();
	}
	
	@PostMapping
	@Transactional
	public ResponseEntity<EstadosDto> cadastrar(@RequestBody @Valid EstadosForm estadosForm,
			UriComponentsBuilder uriBuilder) {		
		Estado estado = estadosForm.converter();
		estadoRepository.save(estado);
		
		URI uri = uriBuilder.path("/topico/{id}").buildAndExpand(estado.getId()).toUri();
		return ResponseEntity.created(uri).body(new EstadosDto(estado));
	}
	
	@PutMapping("/{id}")
	@Transactional 
	public ResponseEntity<EstadosDto> atualizar(@PathVariable Long id,@RequestBody @Valid EstadosForm estadosForm) {	
		Optional<Estado> optional = estadoRepository.findById(id);
		if(optional.isPresent()) {
			Estado estado = estadosForm.atualizar(optional.get(), estadoRepository);
			return ResponseEntity.ok(new EstadosDto(estado));
		}
		return ResponseEntity.notFound().build();
	}
	
	@DeleteMapping("/{id}")
	@Transactional
	public ResponseEntity<?> remover(@PathVariable Long id) {
		Optional<Estado> optional = estadoRepository.findById(id);
		if(optional.isPresent()) {
			estadoRepository.deleteById(id);
			return ResponseEntity.ok().build();
		}
		return ResponseEntity.notFound().build();
	}
}
